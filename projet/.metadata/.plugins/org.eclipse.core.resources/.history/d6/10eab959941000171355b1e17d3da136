package Window;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.GridLayout;
import java.awt.Image;
import java.awt.Insets;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;

import javax.imageio.ImageIO;
import javax.swing.BorderFactory;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.border.Border;

import MainSystem.Modele;
import VocabularySystem.TopicVocabulary;
import VocabularySystem.Word;

public class PanelLesson2 extends JPanel {

	// content variables
	private Modele modele;
	private ArrayList<TopicVocabulary> topics;
	private int currentTopicIndex;
	private String contentVocabulary;
	
	//Label
	private JLabel titleLabel;
	
	// buttons
	private JPanel buttonPanel;
	private GridLayout gridlayout;
	private JButton left;
	private JButton right;
	private ListenerLeftButtonLesson listenerLeft;
	private ListenerRightButtonLesson listenerRight;
	private ButtonEnglishLesson englishButton;
	private ButtonFrenchLesson frenchButton;
	private ButtonBothLanguageLesson bothButton;
		
	private JScrollPane scrollContent;
	private JTextArea contentTextArea;
	private ButtonGoToMainMenu goToMainMenu;
	
	//Main layout
	private GridBagLayout mainLayout;
	
	private int typeOfScreen;

	
	public PanelLesson2(Modele m) {
		
		this.typeOfScreen = 0;
		
		// content variables initialisation
		this.modele = m;
		this.topics = this.modele.getTopics();
		this.currentTopicIndex = 0;
		
		// Label
		Border line = BorderFactory.createLineBorder(Color.BLACK, 1);
		this.titleLabel = new JLabel(
				"          " + this.topics.get(this.currentTopicIndex).getTitleTopic() + "          ");
		this.titleLabel.setBorder(line);
		this.titleLabel.setFont(new Font("Helvetica", Font.BOLD,20));
		this.titleLabel.setHorizontalAlignment(JLabel.CENTER);
		this.titleLabel.setVerticalAlignment(JLabel.CENTER);
		this.titleLabel.setPreferredSize(new Dimension(Main.window.getWidth()/2,50));
		
		// Button
		this.englishButton = new ButtonEnglishLesson(this.modele, this);
		this.englishButton.setPreferredSize(new Dimension(50, 50));
		this.englishButton.setText("E");
		this.frenchButton = new ButtonFrenchLesson(this.modele,this);
		this.frenchButton.setPreferredSize(new Dimension(50, 50));
		this.frenchButton.setText("F");
		this.bothButton = new ButtonBothLanguageLesson(this.modele,this);
		this.bothButton.setPreferredSize(new Dimension(50, 50));
		this.bothButton.setText("E/F");
		
		this.buttonPanel = new JPanel();
		this.buttonPanel.setOpaque(false);
		this.gridlayout = new GridLayout(1, 5);
		this.gridlayout.setHgap(50);
		this.buttonPanel.setLayout(this.gridlayout);
		this.left = new JButton("	<<	");
		this.right = new JButton("	>>	");
		this.left.setPreferredSize(new Dimension(50, 50));
		this.right.setPreferredSize(new Dimension(50, 50));
		this.listenerLeft = new ListenerLeftButtonLesson(this);
		this.listenerRight = new ListenerRightButtonLesson(this);
		this.left.addActionListener(listenerLeft);
		this.right.addActionListener(listenerRight);
		this.buttonPanel.add(this.left);
		this.buttonPanel.add(this.englishButton);
		this.buttonPanel.add(this.bothButton);
		this.buttonPanel.add(this.frenchButton);
		this.buttonPanel.add(this.right);
		
		// initialize content
		this.contentVocabulary = getContent(this.topics.get(currentTopicIndex));
		this.contentTextArea = new JTextArea(this.contentVocabulary);
		this.contentTextArea.setEditable(false);
		this.scrollContent = new JScrollPane(this.contentTextArea, JScrollPane.VERTICAL_SCROLLBAR_ALWAYS,
				JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
		this.scrollContent.setPreferredSize(new Dimension(Main.window.getWidth()/2, Main.window.getHeight()/2));
		this.scrollContent.repaint();
		this.scrollContent.revalidate();
		
		// initialize go to main menu
		this.goToMainMenu = new ButtonGoToMainMenu(this.modele, "<< Title Screen");
		this.goToMainMenu.setOpaque(false);
		this.goToMainMenu.setPreferredSize(new Dimension(200,35));
		
		
		
		//main layout
		this.mainLayout = new GridBagLayout();
		this.setLayout(this.mainLayout);
		
		GridBagConstraints gbc = new GridBagConstraints();
		gbc.gridx = gbc.gridy = 0;
		
		gbc.gridwidth = GridBagConstraints.REMAINDER; // seul composant de sa colonne, il est donc le dernier.
		gbc.gridheight = 1;
		
		gbc.anchor = GridBagConstraints.CENTER;
		gbc.insets = new Insets(5, 0, 0, 0);
		
		this.add(titleLabel, gbc);
		
		gbc.gridx = 0;
		gbc.gridy = 1;
		gbc.gridwidth = GridBagConstraints.REMAINDER;
		gbc.gridheight = 1;
		gbc.anchor = GridBagConstraints.CENTER;
		gbc.insets = new Insets(15, 0, 0, 0);
		
		this.add(buttonPanel,gbc);
		
		gbc.gridx = 0;
		gbc.gridy = 2;
		gbc.gridwidth = GridBagConstraints.REMAINDER;
		gbc.gridheight = 1;
		gbc.anchor = GridBagConstraints.CENTER;
		gbc.insets = new Insets(15, 0, 0, 0);
		
		this.add(scrollContent,gbc);
		
		gbc.gridx = 0;
		gbc.gridy = 3;
		gbc.gridwidth = GridBagConstraints.REMAINDER;
		gbc.gridheight = 1;
		gbc.fill = GridBagConstraints.NONE;
		
		gbc.insets = new Insets(0, 0, 0, 0);
		
		JPanel p = new JPanel();
		p.setOpaque(false);
		this.add(p, gbc);
		
		gbc.gridx = 0;
		gbc.gridy = 4;
		gbc.gridwidth = 1;
		gbc.gridheight = GridBagConstraints.RELATIVE;
		gbc.anchor = GridBagConstraints.FIRST_LINE_START;
		gbc.fill = GridBagConstraints.NONE;
		
		this.add(this.goToMainMenu, gbc);
		
	}
	
	private String concatenatedWord(Word w) {
		String concatenation = "";
		Boolean first = true;
		for (String ew : w.getEnglishWords()) {
			if (!first) {
				concatenation = concatenation + ", ";
			} else {
				first = false;
				concatenation = concatenation + "     ";
			}
			concatenation = concatenation + ew;
		}
		concatenation = concatenation + " : ";
		first = true;
		for (String ef : w.getFrenchWords()) {
			if (!first) {
				concatenation = concatenation + ", ";
			} else {
				first = false;
			}
			concatenation = concatenation + ef;
		}
		concatenation = concatenation + "\n \n";
		return concatenation;
	}
	
	private String concatenateWordEnglishOnly(Word w) {
		String concatenation = "";
		Boolean first = true;
		for (String ew : w.getEnglishWords()) {
			if (!first) {
				concatenation = concatenation + ", ";
			} else {
				first = false;
				concatenation = concatenation + "     ";
			}
			concatenation = concatenation + ew;
		}
		concatenation = concatenation + " : ";
		concatenation = concatenation + "\n \n";
		return concatenation;
	}
	
	private String concatenateWordFrenchOnly(Word w) {
		String concatenation = "";
		Boolean first = true;
		/*for (String ew : w.getEnglishWords()) {
			if (!first) {
				concatenation = concatenation + "  ";
			} else {
				first = false;
				concatenation = concatenation + "     ";
			}
			String ew_blanck = "";
			for (int i=0; i< ew.length() ; i++) {
				ew_blanck = ew_blanck + " "; 
			}
			concatenation = concatenation + ew_blanck;
		}
		concatenation = concatenation + " : ";
		first = true;*/
		for (String ef : w.getFrenchWords()) {
			if (!first) {
				concatenation = concatenation + ", ";
			} else {
				first = false;
			}
			concatenation = concatenation + ef;
		}
		concatenation = concatenation + "\n \n";
		return concatenation;
	}

	private String getContent(TopicVocabulary tv) {
		String content = "\n";
		for (Word w : tv.getTopicVocabulary()) {
			content = content + concatenatedWord(w);
		}
		return content;
	}
	
	private String getContentEnglish(TopicVocabulary tv) {
		String content = "\n";
		for (Word w : tv.getTopicVocabulary()) {
			content = content + concatenateWordEnglishOnly(w);
		}
		return content;
	}
	
	private String getContentFrench(TopicVocabulary tv) {
		String content = "\n";
		for (Word w : tv.getTopicVocabulary()) {
			content = content + concatenateWordFrenchOnly(w);
		}
		return content;
	}

	public void setTopicIndex(int i) {
		this.currentTopicIndex = i;
	}

	public int getTopicIndex() {
		return this.currentTopicIndex;
	}

	public ArrayList<TopicVocabulary> getTopics() {
		return this.topics;
	}

	public void update() {
		this.titleLabel.setText("          " + this.topics.get(this.currentTopicIndex).getTitleTopic() + "          ");

		if (this.typeOfScreen == 0) {
			this.contentVocabulary = getContent(this.topics.get(currentTopicIndex));
			this.contentTextArea.setText(contentVocabulary);
			System.out.println("Both");
		}
		else if (this.typeOfScreen == 1) {
			this.contentVocabulary = getContentEnglish(this.topics.get(currentTopicIndex));
			this.contentTextArea.setText(contentVocabulary);
			System.out.println("English");
		}
		else if (this.typeOfScreen == 2) {
			this.contentVocabulary = getContentFrench(this.topics.get(currentTopicIndex));
			this.contentTextArea.setText(contentVocabulary);
			System.out.println("French");
		}
		this.contentTextArea.setCaretPosition(0);
		this.contentTextArea.repaint();
		this.contentTextArea.revalidate();

		this.scrollContent.repaint();
		this.scrollContent.revalidate();

		this.repaint();
		this.revalidate();
	}

	public void setTypeOfScreen(int type) {
		this.typeOfScreen = type;
	}
	
	public int gettypeOfScreen() {
		return this.typeOfScreen;
	}
	
	public void paintComponent(Graphics g) {
		try {
			Image img = ImageIO.read(new File("Graphics" + File.separator + "MainMenu.jpg"));
			g.drawImage(img, 0, 0, this.getWidth(), this.getHeight(), this);
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
}
